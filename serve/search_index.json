[
["titanic.html", "Chapter 2 Titanic 2.1 Imports 2.2 Data 2.3 EDA 2.4 Visualization 2.5 Models", " Chapter 2 Titanic 2.1 Imports Import the packages that will be used throughout the project. import os import random as rnd import matplotlib.pyplot as plt import numpy as np import pandas as pd import seaborn as sns from sklearn.metrics import ( classification_report, confusion_matrix, explained_variance_score, mean_absolute_error, mean_squared_error, ) from xgboost import XGBRegressor Import the data, and combine the data frames to be able to process all the data in one go (opposed to working on the test and training datasets separately). df_train = pd.read_csv(&quot;~/docs/codeing/python/titanic/train.csv&quot;) df_test = pd.read_csv(&quot;~/docs/codeing/python/titanic/test.csv&quot;) df = pd.concat([df_train, df_test]) 2.2 Data Show a random sample of the data df_sample = df.sample(n=10) html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #ipxjimyamn .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #ipxjimyamn .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ipxjimyamn .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #ipxjimyamn .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #ipxjimyamn .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ipxjimyamn .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #ipxjimyamn .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #ipxjimyamn .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #ipxjimyamn .gt_column_spanner_outer:first-child { padding-left: 0; } #ipxjimyamn .gt_column_spanner_outer:last-child { padding-right: 0; } #ipxjimyamn .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #ipxjimyamn .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #ipxjimyamn .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #ipxjimyamn .gt_from_md > :first-child { margin-top: 0; } #ipxjimyamn .gt_from_md > :last-child { margin-bottom: 0; } #ipxjimyamn .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #ipxjimyamn .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #ipxjimyamn .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ipxjimyamn .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #ipxjimyamn .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #ipxjimyamn .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #ipxjimyamn .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #ipxjimyamn .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #ipxjimyamn .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ipxjimyamn .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #ipxjimyamn .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #ipxjimyamn .gt_sourcenote { font-size: 90%; padding: 4px; } #ipxjimyamn .gt_left { text-align: left; } #ipxjimyamn .gt_center { text-align: center; } #ipxjimyamn .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #ipxjimyamn .gt_font_normal { font-weight: normal; } #ipxjimyamn .gt_font_bold { font-weight: bold; } #ipxjimyamn .gt_font_italic { font-style: italic; } #ipxjimyamn .gt_super { font-size: 65%; } #ipxjimyamn .gt_footnote_marks { font-style: italic; font-size: 65%; } Data Frame Head A random selection of 10 rows of the Titanic data. PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 564 0 3 Simmons, Mr. John male NaN 0 0 SOTON/OQ 392082 8.0500 NaN S 79 1 2 Caldwell, Master. Alden Gates male 0.83 0 2 248738 29.0000 NaN S 392 1 3 Jansson, Mr. Carl Olof male 21.00 0 0 350034 7.7958 NaN S 881 1 2 Shelley, Mrs. William (Imanita Parrish Hall) female 25.00 0 1 230433 26.0000 NaN S 972 NaN 3 Boulos, Master. Akar male 6.00 1 1 2678 15.2458 NaN C 384 1 1 Holverson, Mrs. Alexander Oskar (Mary Aline Towner) female 35.00 1 0 113789 52.0000 NaN S 248 1 2 Hamalainen, Mrs. William (Anna) female 24.00 0 2 250649 14.5000 NaN S 711 1 1 Mayne, Mlle. Berthe Antonine (\"Mrs de Villiers\") female 24.00 0 0 PC 17482 49.5042 C90 C 527 1 2 Ridsdale, Miss. Lucy female 50.00 0 0 W./C. 14258 10.5000 NaN S 44 1 2 Laroche, Miss. Simonne Marie Anne Andree female 3.00 1 2 SC/Paris 2123 41.5792 NaN C Print out the description of the data df_describe_num = round(df.describe(), 2) df_describe_cat = df.describe(include=&quot;O&quot;).transpose() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #fzansaabic .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #fzansaabic .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #fzansaabic .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #fzansaabic .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #fzansaabic .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #fzansaabic .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #fzansaabic .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #fzansaabic .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #fzansaabic .gt_column_spanner_outer:first-child { padding-left: 0; } #fzansaabic .gt_column_spanner_outer:last-child { padding-right: 0; } #fzansaabic .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #fzansaabic .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #fzansaabic .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #fzansaabic .gt_from_md > :first-child { margin-top: 0; } #fzansaabic .gt_from_md > :last-child { margin-bottom: 0; } #fzansaabic .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #fzansaabic .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #fzansaabic .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #fzansaabic .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #fzansaabic .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #fzansaabic .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #fzansaabic .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #fzansaabic .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #fzansaabic .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #fzansaabic .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #fzansaabic .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #fzansaabic .gt_sourcenote { font-size: 90%; padding: 4px; } #fzansaabic .gt_left { text-align: left; } #fzansaabic .gt_center { text-align: center; } #fzansaabic .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #fzansaabic .gt_font_normal { font-weight: normal; } #fzansaabic .gt_font_bold { font-weight: bold; } #fzansaabic .gt_font_italic { font-style: italic; } #fzansaabic .gt_super { font-size: 65%; } #fzansaabic .gt_footnote_marks { font-style: italic; font-size: 65%; } Numerical Features Description of the numerical features. PassengerId Survived Pclass Age SibSp Parch Fare count 1309.00 891.00 1309.00 1046.00 1309.00 1309.00 1308.00 mean 655.00 0.38 2.29 29.88 0.50 0.39 33.30 std 378.02 0.49 0.84 14.41 1.04 0.87 51.76 min 1.00 0.00 1.00 0.17 0.00 0.00 0.00 25% 328.00 0.00 2.00 21.00 0.00 0.00 7.90 50% 655.00 0.00 3.00 28.00 0.00 0.00 14.45 75% 982.00 1.00 3.00 39.00 1.00 0.00 31.28 max 1309.00 1.00 3.00 80.00 8.00 9.00 512.33 html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #pmsnvjlenr .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #pmsnvjlenr .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pmsnvjlenr .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #pmsnvjlenr .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #pmsnvjlenr .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pmsnvjlenr .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #pmsnvjlenr .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #pmsnvjlenr .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #pmsnvjlenr .gt_column_spanner_outer:first-child { padding-left: 0; } #pmsnvjlenr .gt_column_spanner_outer:last-child { padding-right: 0; } #pmsnvjlenr .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #pmsnvjlenr .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #pmsnvjlenr .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #pmsnvjlenr .gt_from_md > :first-child { margin-top: 0; } #pmsnvjlenr .gt_from_md > :last-child { margin-bottom: 0; } #pmsnvjlenr .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #pmsnvjlenr .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #pmsnvjlenr .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pmsnvjlenr .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #pmsnvjlenr .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #pmsnvjlenr .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #pmsnvjlenr .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #pmsnvjlenr .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #pmsnvjlenr .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pmsnvjlenr .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #pmsnvjlenr .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #pmsnvjlenr .gt_sourcenote { font-size: 90%; padding: 4px; } #pmsnvjlenr .gt_left { text-align: left; } #pmsnvjlenr .gt_center { text-align: center; } #pmsnvjlenr .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #pmsnvjlenr .gt_font_normal { font-weight: normal; } #pmsnvjlenr .gt_font_bold { font-weight: bold; } #pmsnvjlenr .gt_font_italic { font-style: italic; } #pmsnvjlenr .gt_super { font-size: 65%; } #pmsnvjlenr .gt_footnote_marks { font-style: italic; font-size: 65%; } Categorical Features Description of the categorical features. count unique top freq Name 1309 1307 Connolly, Miss. Kate 2 Sex 1309 2 male 843 Ticket 1309 929 CA. 2343 11 Cabin 295 186 C23 C25 C27 6 Embarked 1307 3 S 914 2.3 EDA 2.3.1 Missing Data Show missing data in a clear heatmap. f, ax = plt.subplots(nrows=1, ncols=1, figsize=(12,10)) sns.heatmap(df.isnull(), yticklabels=False, cbar=False, cmap=&quot;Blues&quot; ) ax.set_title(&#39;Fields with Missing Values&#39;, fontsize=16) for tick in ax.yaxis.get_major_ticks(): tick.label.set_fontsize(14) plt.savefig(&quot;01_missing_data_heatmap&quot;) plt.show() Show the specific values. def missing_only(value): if value == 0 : return np.nan else: return value missing_values = pd.DataFrame() missing_values[&#39;Percentage&#39;] = np.round((df.isna().sum() / df.count().max()) * 100, 2).apply(lambda value: missing_only(value)).dropna() missing_values[&#39;Counts&#39;] = np.round(df.isna().sum(), 2).apply(lambda value: missing_only(value)).dropna() html { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif; } #xprpfkqnpf .gt_table { display: table; border-collapse: collapse; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; } #xprpfkqnpf .gt_heading { background-color: #FFFFFF; text-align: left; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xprpfkqnpf .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; border-bottom-color: #FFFFFF; border-bottom-width: 0; } #xprpfkqnpf .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 0; padding-bottom: 4px; border-top-color: #FFFFFF; border-top-width: 0; } #xprpfkqnpf .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xprpfkqnpf .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; } #xprpfkqnpf .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; } #xprpfkqnpf .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 10; font-weight: bold; text-transform: capitalize; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; } #xprpfkqnpf .gt_column_spanner_outer:first-child { padding-left: 0; } #xprpfkqnpf .gt_column_spanner_outer:last-child { padding-right: 0; } #xprpfkqnpf .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: bottom; padding-top: 5px; padding-bottom: 6px; overflow-x: hidden; display: inline-block; width: 100%; } #xprpfkqnpf .gt_group_heading { padding: 8px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; } #xprpfkqnpf .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; vertical-align: middle; } #xprpfkqnpf .gt_from_md > :first-child { margin-top: 0; } #xprpfkqnpf .gt_from_md > :last-child { margin-bottom: 0; } #xprpfkqnpf .gt_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: solid; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; vertical-align: middle; overflow-x: hidden; } #xprpfkqnpf .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 12px; } #xprpfkqnpf .gt_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xprpfkqnpf .gt_first_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; } #xprpfkqnpf .gt_grand_summary_row { color: #333333; background-color: #FFFFFF; text-transform: inherit; padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; } #xprpfkqnpf .gt_first_grand_summary_row { padding-top: 8px; padding-bottom: 8px; padding-left: 5px; padding-right: 5px; border-top-style: double; border-top-width: 6px; border-top-color: #D3D3D3; } #xprpfkqnpf .gt_striped { background-color: rgba(128, 128, 128, 0.05); } #xprpfkqnpf .gt_table_body { border-top-style: solid; border-top-width: 2px; border-top-color: #D3D3D3; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; } #xprpfkqnpf .gt_footnotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xprpfkqnpf .gt_footnote { margin: 0px; font-size: 90%; padding: 4px; } #xprpfkqnpf .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; } #xprpfkqnpf .gt_sourcenote { font-size: 90%; padding: 4px; } #xprpfkqnpf .gt_left { text-align: left; } #xprpfkqnpf .gt_center { text-align: center; } #xprpfkqnpf .gt_right { text-align: right; font-variant-numeric: tabular-nums; } #xprpfkqnpf .gt_font_normal { font-weight: normal; } #xprpfkqnpf .gt_font_bold { font-weight: bold; } #xprpfkqnpf .gt_font_italic { font-style: italic; } #xprpfkqnpf .gt_super { font-size: 65%; } #xprpfkqnpf .gt_footnote_marks { font-style: italic; font-size: 65%; } Missing values Missing values only on features with missing values. Percentage Counts Survived 31.93 418 Age 20.09 263 Fare 0.08 1 Cabin 77.46 1014 Embarked 0.15 2 2.3.2 Correlation Show the correlation between the survival rate and the other features. TARGET = &quot;Survived&quot; plt.figure(figsize=(14, 8)) df.corr()[TARGET].sort_values()[:-1].plot(kind=&quot;bar&quot;) plt.savefig(&quot;correlation_barplot&quot;) plt.show() Show the correlation between all features. plt.figure(figsize=(14, 12)) plt.title(&#39;Correlation of Features&#39;, y=1.05, size=15) mask = np.zeros_like(df.corr()) mask[np.triu_indices_from(mask)] = True sns.heatmap( df.corr(), annot=True, linewidths=0.2, linecolor=&#39;white&#39;, cmap=&quot;RdBu&quot;, center=0, mask=mask, vmax=1.0, vmin=-1.0, square=True, ) plt.savefig(&quot;correlation_map&quot;) plt.show() 2.3.3 Pivot Features def pivot_feature(df, TARGET, FEATURE): &quot;&quot;&quot; Input the - data frame - target feature - relevant feature (only for features which are categorical (Sex), ordinal (Passenger class) or discrete (Sibbling count)). &quot;&quot;&quot; return (df[[FEATURE, TARGET ]].groupby([FEATURE]).mean().sort_values(by=FEATURE, ascending=False)) pivot_feature(df, &quot;Survived&quot;, &quot;Pclass&quot;) ## Survived ## Pclass ## 3 0.242363 ## 2 0.472826 ## 1 0.629630 pivot_feature(df, &quot;Survived&quot;, &quot;Sex&quot;) ## Survived ## Sex ## male 0.188908 ## female 0.742038 pivot_feature(df, &quot;Survived&quot;, &quot;SibSp&quot;) ## Survived ## SibSp ## 8 0.000000 ## 5 0.000000 ## 4 0.166667 ## 3 0.250000 ## 2 0.464286 ## 1 0.535885 ## 0 0.345395 pivot_feature(df, &quot;Survived&quot;, &quot;Parch&quot;) ## Survived ## Parch ## 9 NaN ## 6 0.000000 ## 5 0.200000 ## 4 0.000000 ## 3 0.600000 ## 2 0.500000 ## 1 0.550847 ## 0 0.343658 2.4 Visualization def plot_corr_numerical(df, TARGET, FEATURE): &quot;&quot;&quot; Data Frame Target feature Feature of intrest &quot;&quot;&quot; g = sns.FacetGrid(df, col=TARGET) g.map(plt.hist, FEATURE, bins=20) plt.savefig(&quot;04_corr_numerical_&quot; + TARGET + &quot;_&quot; + FEATURE) plt.show() plot_corr_numerical(df, &quot;Survived&quot;, &quot;Age&quot;) def plot_corr_num_ord(df, TARGET, numerical_FEATURE, ordinal_FEATURE): &quot;&quot;&quot; Data Frame Target feature numerical feature of intrest ordinal feature of intrest &quot;&quot;&quot; g = sns.FacetGrid(df, col=TARGET, row=ordinal_FEATURE, size=2.2, aspect=1.6) g.map(plt.hist, numerical_FEATURE, alpha=0.5, bins=20) g.add_legend() plt.savefig(&quot;04_corr_num_ord_&quot; + TARGET + &quot;_&quot; + numerical_FEATURE + &quot;_&quot; + ordinal_FEATURE) plt.show() plot_corr_num_ord(df, &quot;Survived&quot;, &quot;Age&quot;, &quot;Pclass&quot;) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) def plot_corr_cat( df, TARGET, categorical_FEATURE, categorical_FEATURE_x_axis, categorical_FEATURE_new_line, ): &quot;&quot;&quot; Data Frame Target feature - y axis categorical feature - facet row feature of intrest feature of intrest &quot;&quot;&quot; g = sns.FacetGrid(df, row=categorical_FEATURE, size=2.2, aspect=1.6) g.map( sns.pointplot, categorical_FEATURE_x_axis, TARGET, categorical_FEATURE_new_line, palette=&quot;deep&quot;, ) g.add_legend() plt.savefig(&quot;04_corr_cat_&quot; + TARGET + &quot;_&quot; + categorical_FEATURE_x_axis + &quot;_&quot; + categorical_FEATURE_new_line) plot_corr_cat(df, &quot;Survived&quot;, &quot;Embarked&quot;, &quot;Pclass&quot;, &quot;Sex&quot;) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:645: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot. ## warnings.warn(warning) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:650: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot. ## warnings.warn(warning) def plot_corr_cat_num( df, TARGET, categorical_FEATURE_facet_row, categorical_FEATURE_y_axis, categorical_FEATURE_x_axis, ): &quot;&quot;&quot; Data Frame Target feature - y axis categorical feature - facet row feature of intrest feature of intrest &quot;&quot;&quot; g = sns.FacetGrid(df, row=categorical_FEATURE_facet_row, col=TARGET, size=2.2, aspect=1.6) g.map( sns.barplot, categorical_FEATURE_x_axis, categorical_FEATURE_y_axis, palette=&quot;deep&quot;, alpha=0.5, ci=None, ) g.add_legend() plt.savefig(&quot;04_corr_cat_num_&quot; + TARGET + &quot;_&quot; + categorical_FEATURE_x_axis + &quot;_&quot; + categorical_FEATURE_y_axis) plt.show() plot_corr_cat_num(df, &quot;Survived&quot;, &quot;Embarked&quot;, &quot;Fare&quot;, &quot;Sex&quot;) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:645: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot. ## warnings.warn(warning) df.drop([&quot;Ticket&quot;, &quot;Cabin&quot;, &quot;PassengerId&quot;], inplace=True, axis=1) 2.4.1 Feature Engineering df[&quot;Title&quot;] = df[&quot;Name&quot;].str.extract(&quot; ([A-Za-z]+)\\.&quot;, expand=False) ## get word before the . pd.crosstab(df[&quot;Title&quot;], df[&quot;Sex&quot;]) ## Sex female male ## Title ## Capt 0 1 ## Col 0 4 ## Countess 1 0 ## Don 0 1 ## Dona 1 0 ## Dr 1 7 ## Jonkheer 0 1 ## Lady 1 0 ## Major 0 2 ## Master 0 61 ## Miss 260 0 ## Mlle 2 0 ## Mme 1 0 ## Mr 0 757 ## Mrs 197 0 ## Ms 2 0 ## Rev 0 8 ## Sir 0 1 df[&quot;Title&quot;].unique() ## array([&#39;Mr&#39;, &#39;Mrs&#39;, &#39;Miss&#39;, &#39;Master&#39;, &#39;Don&#39;, &#39;Rev&#39;, &#39;Dr&#39;, &#39;Mme&#39;, &#39;Ms&#39;, ## &#39;Major&#39;, &#39;Lady&#39;, &#39;Sir&#39;, &#39;Mlle&#39;, &#39;Col&#39;, &#39;Capt&#39;, &#39;Countess&#39;, ## &#39;Jonkheer&#39;, &#39;Dona&#39;], dtype=object) def repace_values_with(df, FEATURE, LIST, REPLACE_WITH): &quot;&quot;&quot; Replace values in a column with ... &quot;&quot;&quot; df[FEATURE] = df[FEATURE].replace(LIST, REPLACE_WITH) repace_values_with( df, &quot;Title&quot;, [ &quot;Don&quot;, &quot;Rev&quot;, &quot;Dr&quot;, &quot;Major&quot;, &quot;Lady&quot;, &quot;Sir&quot;, &quot;Col&quot;, &quot;Capt&quot;, &quot;Countess&quot;, &quot;Jonkheer&quot; ], &quot;Rare&quot;, ) repace_values_with(df, &quot;Title&quot;, &quot;Mlle&quot;, &quot;Miss&quot;) repace_values_with(df, &quot;Title&quot;, &quot;Ms&quot;, &quot;Miss&quot;) repace_values_with(df, &quot;Title&quot;, &quot;Mme&quot;, &quot;Mrs&quot;) df[[&quot;Title&quot;, &quot;Survived&quot;]].groupby([&quot;Title&quot;], as_index=False).mean() ## Title Survived ## 0 Dona NaN ## 1 Master 0.575000 ## 2 Miss 0.702703 ## 3 Mr 0.156673 ## 4 Mrs 0.793651 ## 5 Rare 0.347826 def cat_to_ord(df, FEATURE, DICT): df[FEATURE] = df[FEATURE].map(DICT).fillna(0) cat_to_ord(df, &quot;Title&quot;, { &quot;Master&quot;: 1, &quot;Miss&quot;: 2, &quot;Mr&quot;: 3, &quot;Mrs&quot;: 4, &quot;Rare&quot;: 5, }) df.drop([&quot;Name&quot;], inplace=True, axis=1) def dummify(df, features_list): return pd.get_dummies( df, columns=features_list, drop_first=True, ) df = dummify(df, [&quot;Sex&quot;]) g = sns.FacetGrid(df, row=&quot;Pclass&quot;, col=&quot;Sex_male&quot;, size=2.2, aspect=1.6) ## /nix/store/lz8yaf1c80c6zb3qj11j58x3qq366wxx-python3.8-seaborn-0.11.0/lib/python3.8/site-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code. ## warnings.warn(msg, UserWarning) g.map(plt.hist, &quot;Age&quot;, alpha=0.5, bins=20) ## &lt;seaborn.axisgrid.FacetGrid object at 0x7f268cd11d30&gt; g.add_legend() ## &lt;seaborn.axisgrid.FacetGrid object at 0x7f268cd11d30&gt; plt.savefig(&quot;06_hist_&quot;) plt.show() guess_ages = np.zeros((2, 3)) for i in range(0, 2): for j in range(0, 3): guess_df = df[(df[&quot;Sex_male&quot;] == i) &amp; (df[&quot;Pclass&quot;] == j + 1)][&quot;Age&quot;].dropna() ## age_mean = guess_df.mean() # age_std = guess_df.std() ## age_guess = rnd.uniform(age_mean - age_std, age_mean + age_std) age_guess = guess_df.median() ## Convert random age float to nearest .5 age guess_ages[i, j] = int(age_guess / 0.5 + 0.5) * 0.5 for i in range(0, 2): for j in range(0, 3): df.loc[(df.Age.isnull()) &amp; (df.Sex_male == i) &amp; (df.Pclass == j + 1), &quot;Age&quot;, ] = guess_ages[i, j] df[&quot;Age&quot;] = df[&quot;Age&quot;].astype(int) df.head() ## Survived Pclass Age SibSp Parch Fare Embarked Title Sex_male ## 0 0.0 3 22 1 0 7.2500 S 3.0 1 ## 1 1.0 1 38 1 0 71.2833 C 4.0 0 ## 2 1.0 3 26 0 0 7.9250 S 2.0 0 ## 3 1.0 1 35 1 0 53.1000 S 4.0 0 ## 4 0.0 3 35 0 0 8.0500 S 3.0 1 df[&quot;Age_Band&quot;] = pd.cut(df[&quot;Age&quot;], 5) df[[&quot;Age_Band&quot;, &quot;Survived&quot;]].groupby([&quot;Age_Band&quot;], as_index=False).mean().sort_values(by=&quot;Age_Band&quot;, ascending=True) ## Age_Band Survived ## 0 (-0.08, 16.0] 0.550000 ## 1 (16.0, 32.0] 0.337374 ## 2 (32.0, 48.0] 0.412037 ## 3 (48.0, 64.0] 0.434783 ## 4 (64.0, 80.0] 0.090909 DATA_FRAME = df COL = &quot;Age&quot; def function1(col_value): if col_value &lt;= 16: return 0 elif (col_value &gt; 16) &amp; (col_value &lt;= 32): return 1 elif (col_value &gt; 32) &amp; (col_value &lt;= 48): return 2 elif (col_value &gt; 48) &amp; (col_value &lt;= 64): return 3 else: return 4 df[&quot;Age_Bands&quot;] = DATA_FRAME[COL].apply(lambda col_value: function1(col_value)) df[&quot;Family_size&quot;] = df[&quot;SibSp&quot;] + df[&quot;Parch&quot;] + 1 df[[&quot;Family_size&quot;, &quot;Survived&quot;]].groupby([&quot;Family_size&quot;], as_index=False).mean().sort_values(by=&quot;Survived&quot;, ascending=False) ## Family_size Survived ## 3 4 0.724138 ## 2 3 0.578431 ## 1 2 0.552795 ## 6 7 0.333333 ## 0 1 0.303538 ## 4 5 0.200000 ## 5 6 0.136364 ## 7 8 0.000000 ## 8 11 0.000000 DATA_FRAME = df COL = &quot;Family_size&quot; def function1(col_value): if col_value &gt;= 2: return 0 else: return 1 df[&quot;Is_alone&quot;] = DATA_FRAME[COL].apply(lambda col_value: function1(col_value)) df[[&quot;Is_alone&quot;, &quot;Survived&quot;]].groupby([&quot;Is_alone&quot;]).mean().sort_values(by=&quot;Survived&quot;) ## Survived ## Is_alone ## 1 0.303538 ## 0 0.505650 df[&quot;Embarked&quot;].fillna(&quot;S&quot;, inplace=True) df[&quot;Embarked&quot;] = df[&quot;Embarked&quot;].map({&quot;S&quot;: 0, &quot;C&quot;: 1, &quot;Q&quot;: 2}).astype(int) print(pd.qcut(df[&quot;Fare&quot;], 4)[[]]) ## Series([], Name: Fare, dtype: category ## Categories (4, interval[float64]): [(-0.001, 7.896] &lt; (7.896, 14.454] &lt; (14.454, 31.275] &lt; ## (31.275, 512.329]]) DATA_FRAME = df COL = &quot;Fare&quot; def function1(col_value): if col_value &lt;= 7.91: return 0 elif (col_value &gt;= 7.91) &amp; (col_value &lt;= 14.454): return 1 elif (col_value &gt;= 14.454) &amp; (col_value &lt;= 31.0): return 2 else: return 3 df[&quot;Fare_bands&quot;] = DATA_FRAME[COL].apply( lambda col_value: function1(col_value)) df.drop([&quot;SibSp&quot;, &quot;Parch&quot;, &quot;Age_Band&quot;, &quot;Is_alone&quot;, &quot;Fare&quot;, &quot;Age&quot;], inplace=True, axis=1) plt.figure(figsize=(14, 12)) plt.title(&#39;Correlation of Features&#39;, y=1.05, size=15) mask = np.zeros_like(df.corr()) mask[np.triu_indices_from(mask)] = True sns.heatmap( df.astype(float).corr(), annot=True, linewidths=0.2, linecolor=&#39;white&#39;, cmap=&quot;RdBu&quot;, center=0, mask=mask, vmax=1.0, vmin=-1.0, square=True, ) plt.savefig(&quot;03_correlation_map_2&quot;) plt.show() 2.5 Models 2.5.1 Prepartion TARGET_COL = &quot;Survived&quot; df = df[~df[TARGET_COL].isna()] ## ~ = not ## df = df.sample(frac=0.2,random_state=101) feat = df.drop(TARGET_COL, axis=1) tar = df[TARGET_COL] from sklearn.model_selection import train_test_split feat_train, feat_test, tar_train, tar_test = train_test_split(feat, tar, test_size=0.3) 2.5.2 Run Models from sklearn.ensemble import RandomForestClassifier from sklearn.linear_model import LogisticRegression, Perceptron, SGDClassifier from sklearn.naive_bayes import GaussianNB from sklearn.neighbors import KNeighborsClassifier from sklearn.svm import SVC, LinearSVC from sklearn.tree import DecisionTreeClassifier import xgboost as xgb def knn_value_plot(feat_train, tar_train, feat_test, tar_test, max_range): &quot;&quot;&quot; Iterate to get the best k value and plot it, between 1 and the max_range &quot;&quot;&quot; error_rate = [] for i in range(1, max_range): model_knn = KNeighborsClassifier(n_neighbors=i) model_knn.fit(feat_train, tar_train) pred_knn = model_knn.predict(feat_test) error_rate.append(np.mean(pred_knn != tar_test)) plt.clf() sns.lineplot(x=range(1, max_range), y=error_rate) plt.savefig(&quot;model_knn_n_values&quot;) # knn_value_plot(feat_train, tar_train, feat_test, tar_test, 30) # knn_n_value = 5 def basic_models(feat_train, tar_train, feat_test, tar_test, knn_neighbours): &quot;&quot;&quot; A set of all the basic models to be easily applied, Returns the logistic correlation, and the % score of each model Also globally exports the predications of each model as ex. pred_logreg &quot;&quot;&quot; # Imports # Values to be exported global pred_rfc global pred_logreg global pred_svc global pred_rfc global pred_gaus global pred_perc global pred_sgd global pred_linear_svc global pred_dtree global pred_knn global pred_xgb # LogisticRegression model_logreg = LogisticRegression().fit(feat_train, tar_train) pred_logreg = model_logreg.predict(feat_test) # knn model_knn = KNeighborsClassifier(n_neighbors=knn_neighbours).fit( feat_train, tar_train) pred_knn = model_knn.predict(feat_test) # SVM model_svc = SVC().fit(feat_train, tar_train) pred_svc = model_svc.predict(feat_test) # GaussianNB model_gaus = GaussianNB().fit(feat_train, tar_train) pred_gaus = model_gaus.predict(feat_test) # Perceptron model_perc = Perceptron().fit(feat_train, tar_train) pred_perc = model_perc.predict(feat_test) # LinearSVC model_linear_svc = LinearSVC().fit(feat_train, tar_train) pred_linear_svc = model_perc.predict(feat_test) # Stochastic Gradient Descent model_sgd = SGDClassifier().fit(feat_train, tar_train) pred_sgd = model_perc.predict(feat_test) # DecisionTreeClassifier model_dtree = DecisionTreeClassifier().fit(feat_train, tar_train) pred_dtree = model_dtree.predict(feat_test) # RandomForestClassifier model_rfc = RandomForestClassifier(n_estimators=200).fit(feat_train, tar_train) pred_rfc = model_rfc.predict(feat_test) # model_xgb = xgb.XGBClassifier().fit(feat_train, tar_train) pred_xgb = model_xgb.predict(feat_test) # LogisticRegression Correlations coeff_df = pd.DataFrame(feat_train.columns) coeff_df.columns = [&quot;Feature&quot;] coeff_df[&quot;Correlation&quot;] = pd.Series(model_logreg.coef_[0]) coeff_df = coeff_df.sort_values(by=&quot;Correlation&quot;, ascending=False) # Result score models = pd.DataFrame({ &quot;Model&quot;: [ &quot;Logistic Regression&quot;, &quot;Support Vector Machines&quot;, &quot;Random Forest&quot;, &quot;Naive Bayes&quot;, &quot;Perceptron&quot;, &quot;Stochastic Gradient Decent&quot;, &quot;Linear SVC&quot;, &quot;Decision Tree&quot;, &quot;KNN&quot;, &quot;Xgboost&quot; ], &quot;Score&quot;: [ round(model_logreg.score(feat_test, tar_test) * 100, 2), round(model_svc.score(feat_test, tar_test) * 100, 2), round(model_rfc.score(feat_test, tar_test) * 100, 2), round(model_gaus.score(feat_test, tar_test) * 100, 2), round(model_perc.score(feat_test, tar_test) * 100, 2), round(model_sgd.score(feat_test, tar_test) * 100, 2), round(model_linear_svc.score(feat_test, tar_test) * 100, 2), round(model_dtree.score(feat_test, tar_test) * 100, 2), round(model_knn.score(feat_test, tar_test) * 100, 2), round(model_xgb.score(feat_test, tar_test) * 100, 2), ], }).sort_values(by=&quot;Score&quot;, ascending=False) return (coeff_df, print(&quot;\\n\\n&quot;), models) basic_models(feat_train, tar_train, feat_test, tar_test, knn_n_value) ## ## # import xgboost as xgb # ## @knitr model_xgboost # RANGE = np.arange(.5, 1.5, .1) # error_rate = [] # for i in RANGE: # model_xgb = xgb.XGBClassifier( # learning_rate = 0.5, # # n_estimators= 2000, # # max_depth= i, # # min_child_weight= 2, # gamma= .77, #gamma=1, # subsample=.5, # colsample_bytree=1, # # objective= &#39;binary:logistic&#39;, # # nthread= -1, # scale_pos_weight=i, # ).fit(feat_train, tar_train) # pred_xgb = model_xgb.predict(feat_test) # # error_rate.append(round(model_xgb.score(feat_test, tar_test) * 100, 2)) # print(&#39;value: &#39;, round(i, 3), &#39;result: &#39;, round(model_xgb.score(feat_test, tar_test) * 100, 2)) # sns.lineplot(x=RANGE, y=error_rate) # plt.savefig(&quot;model_xgb_scale_pos&quot;) # plt.cla() ## ## ## ## ## ( Feature Correlation ## 6 Fare_bands 0.293955 ## 1 Embarked 0.179744 ## 5 Family_size -0.279801 ## 2 Title -0.330510 ## 4 Age_Bands -0.567774 ## 0 Pclass -1.075916 ## 3 Sex_male -2.692426, None, Model Score ## 1 Support Vector Machines 81.72 ## 9 Xgboost 80.97 ## 8 KNN 79.85 ## 2 Random Forest 79.48 ## 7 Decision Tree 77.99 ## 6 Linear SVC 76.49 ## 0 Logistic Regression 76.12 ## 3 Naive Bayes 75.37 ## 4 Perceptron 73.88 ## 5 Stochastic Gradient Decent 69.78) ## ## /nix/store/64ka5flvkgi6rw2xz1bxp28prrks09dg-python3.8-scikit-learn-0.23.2/lib/python3.8/site-packages/sklearn/svm/_base.py:976: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations. ## warnings.warn(&quot;Liblinear failed to converge, increase &quot; 2.5.3 Xgboost model import xgboost as xgb model_xgb = xgb.XGBClassifier( ).fit(feat_train, tar_train) pred_xgb = model_xgb.predict(feat_test) print(&#39;baseline&#39;, round(model_xgb.score(feat_test, tar_test) * 100,2)) ## baseline 80.97 import xgboost as xgb model_xgb = xgb.XGBClassifier( learning_rate = .5, gamma=0.77, #gamma=1, subsample=0.5, ).fit(feat_train, tar_train) pred_xgb = model_xgb.predict(feat_test) print(&#39;personal&#39;, round(model_xgb.score(feat_test, tar_test) * 100, 2)) ## ## personal 78.73 "]
]
